name: ÔøΩÔøΩ CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_ENV: production
  
  # Kinde Auth
  KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL }}
  KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}
  KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET }}
  KINDE_SITE_URL: ${{ secrets.KINDE_SITE_URL }}
  KINDE_POST_LOGOUT_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}
  KINDE_POST_LOGIN_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}
  
  # Database
  POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
  POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
  POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
  DIRECT_URL: ${{ secrets.DIRECT_URL }}
  
  # NextAuth
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
  
  # Vercel
  VERCEL_URL: ${{ secrets.VERCEL_URL }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  
  # Email
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  
  # App Configuration
  DEBUG_LOGGING: false

jobs:
  test-and-quality:
    name: üß™ Test & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì• Install dependencies
        run: bun install --frozen-lockfile

      - name: ÔøΩÔøΩ Type check
        run: bun run type-check

      - name: üßπ Lint code
        run: bun run lint

      - name: üé® Format check
        run: bun run format:check

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì• Install dependencies
        run: bun install --frozen-lockfile

      - name: üîí Security audit
        run: bun pm audit
        continue-on-error: true

      - name: ÔøΩÔøΩÔ∏è Type safety check
        run: bun run type-safety

  build:
    name: ÔøΩÔøΩÔ∏è Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-and-quality, security-scan]
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì• Install dependencies
        run: bun install --frozen-lockfile

      - name: ÔøΩÔøΩÔ∏è Build application
        run: bun run build
        env:
          # Explicitnƒõ nastavit v≈°echny environment variables pro build
          NODE_ENV: production
          KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL }}
          KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}
          KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET }}
          KINDE_SITE_URL: ${{ secrets.KINDE_SITE_URL }}
          KINDE_POST_LOGOUT_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}
          KINDE_POST_LOGIN_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          VERCEL_URL: ${{ secrets.VERCEL_URL }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          DEBUG_LOGGING: false

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  deploy-staging:
    name: ÔøΩÔøΩ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: ÔøΩÔøΩ Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: ÔøΩÔøΩ Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  notify:
    name: ÔøΩÔøΩ Notify Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: üì¢ Deployment notification
        run: |
          echo "üöÄ Deployment pipeline completed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"