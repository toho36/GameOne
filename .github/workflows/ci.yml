name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  NODE_VERSION: "20"
  BUN_VERSION: "latest"

jobs:
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Type checking
        run: bun run type-check

      - name: 🧹 Lint code
        run: bun run lint

      - name: 🎨 Check formatting
        run: bun run format:check

      - name: 🧪 Run tests
        run: bun run test --run --coverage

      - name: 📊 Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Check for outdated packages
        run: bun outdated || true
        
      - name: 🔍 Install npm for audit (security check)
        run: npm install --package-lock-only
        
      - name: 🔍 Run npm audit for vulnerabilities
        run: npm audit --audit-level moderate || true

      - name: 🛡️ Run security scan
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "security-scan-results.sarif"
        continue-on-error: true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master'
    environment: production
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📢 Deployment notification
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Environment: ${{ github.ref == 'refs/heads/master' && 'Production' || 'Staging' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      - name: ❌ Deployment failure notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Environment: ${{ github.ref == 'refs/heads/master' && 'Production' || 'Staging' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
